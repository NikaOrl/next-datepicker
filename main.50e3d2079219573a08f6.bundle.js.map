{"version":3,"file":"main.50e3d2079219573a08f6.bundle.js","sources":["webpack:///./projects/next-datepicker/src/lib/next-date-formatter/next-date-formatter.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {NgbDateParserFormatter, NgbDateStruct} from '@ng-bootstrap/ng-bootstrap';\r\nimport {DatePipe} from '@angular/common';\r\n\r\nfunction isNumber(value: any): boolean {\r\n  return !isNaN(toInteger(value));\r\n}\r\n\r\nfunction toInteger(value: any): number {\r\n  return parseInt(`${value}`, 10);\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NextDateFormatter extends NgbDateParserFormatter {\r\n  constructor(private datePipe: DatePipe) {\r\n    super();\r\n  }\r\n\r\n  public parse(value: string): NgbDateStruct {\r\n    if (value) {\r\n      const dateParts = value.trim().split(/\\D/);\r\n      if (dateParts.length === 1 && isNumber(dateParts[0])) {\r\n        return {month: null, day: null, year: toInteger(dateParts[0])};\r\n      } else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {\r\n        return {\r\n          month: toInteger(dateParts[1]),\r\n          day: null,\r\n          year: toInteger(dateParts[0]),\r\n        };\r\n      } else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\r\n        return {\r\n          month: toInteger(dateParts[1]),\r\n          day: toInteger(dateParts[2]),\r\n          year: toInteger(dateParts[0]),\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public format(dateStruct: NgbDateStruct): string {\r\n    if (!dateStruct) {\r\n      return '';\r\n    }\r\n    const date = new Date(dateStruct.year, dateStruct.month - 1, dateStruct.day);\r\n    return this.datePipe.transform(date);\r\n  }\r\n}\r\n"],"mappings":"AAIA","sourceRoot":""}